00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 01/06/2019 12:53:41

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Practice compilers II.
00000000                             3  * Written by : Andrés Ramos Seguí, Alex Mateo Fiol, Jaime Crespí Valero.
00000000                             4  * Date       : 17/06/2019
00000000                             5  * Description: Assembler code for compilers II practice.
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  * ------------------------ INCLUDES ---------------------- *
00000000                             9      INCLUDE "MACROS.X68"
00000000                            10  
00000000                            11  ASSIGNATION_INTEGER     MACRO
00000000                            12  * Macro to add.
00000000                            13  * Parameters: \1: Param1   ;Value of int or boolean
00000000                            14  *             \2: Param2   ;Offset of destination variable
00000000                            15  * Modifies  : Nothing
00000000                            16  *-----------------------------------------------------------
00000000                            17     MOVE.L \1, \2(A7)
00000000                            18     ENDM
00000000                            19  ASSIGNATION_BOOLEAN     MACRO
00000000                            20  * Macro to add.
00000000                            21  * Parameters: \1: Param1   ;Value of int or boolean
00000000                            22  *             \2: Param2   ;Offset of destination variable
00000000                            23  * Modifies  : Nothing
00000000                            24  *-----------------------------------------------------------
00000000                            25     MOVE.W \1, \2(A7)
00000000                            26     ENDM
00000000                            27  ASSIGNATION_STRING  MACRO
00000000                            28  * Macro to add.                          
00000000                            29  * Parameters: \1: Param1   ;offset variable
00000000                            30  *             \2: Param1   ;label variable
00000000                            31  *             \3: Param1   ;size string
00000000                            32  * Modifies  : D0, D1
00000000                            33  *-----------------------------------------------------------
00000000                            34      MOVE.L A7, A1
00000000                            35      ADD.L \1, A1
00000000                            36      MOVE.L \2, A2
00000000                            37      MOVE.L \3, D0
00000000                            38      CMP.L #0, D0
00000000                            39      BEQ STRING_COPIED\@
00000000                            40      CLR.L D1
00000000                            41  FILL_NEXT_CHAR\@
00000000                            42      MOVE.B (A2)+, D1
00000000                            43      MOVE.W D1, (A1)+
00000000                            44      SUB.L #2, D0
00000000                            45      CMP.L #0, D0
00000000                            46      BNE FILL_NEXT_CHAR\@
00000000                            47  STRING_COPIED\@
00000000                            48      ENDM
00000000                            49  ASSIGNATION_VARIABLE_INTEGER    MACRO
00000000                            50  * Macro to add.                          
00000000                            51  * Parameters: \1: Param1   ;source1
00000000                            52  *             \2: Param2   ;destination
00000000                            53  * Modifies  : Nothing
00000000                            54  *-----------------------------------------------------------
00000000                            55     MOVE.L \1(A7), \2(A7)
00000000                            56     
00000000                            57     ENDM
00000000                            58  ASSIGNATION_VARIABLE_BOOLEAN    MACRO
00000000                            59  * Macro to add.                          
00000000                            60  * Parameters: \1: Param1   ;source1
00000000                            61  *             \2: Param2   ;destination
00000000                            62  * Modifies  : Nothing
00000000                            63  *-----------------------------------------------------------
00000000                            64     MOVE.W \1(A7), \2(A7)
00000000                            65     
00000000                            66     ENDM
00000000                            67  ASSIGNATION_VARIABLE_STRING MACRO
00000000                            68  * Macro to add.                          
00000000                            69  * Parameters: \1: Param1   ;offset destination variable
00000000                            70  *             \2: Param1   ;remaining size of destination var
00000000                            71  *             \3: Param1   ;offset source variable
00000000                            72  *             \4: Param1   ;size source variable
00000000                            73  * Modifies  : D0
00000000                            74  *-----------------------------------------------------------    
00000000                            75      MOVE.L A7, A1
00000000                            76      ADD.L \1, A1
00000000                            77      MOVE.L \2, D1
00000000                            78      MOVE.L A7, A2
00000000                            79      ADD.L \3, A2
00000000                            80      MOVE.L \4, D2
00000000                            81      CMP.L #0, D2
00000000                            82      BEQ FILL_REMAINING_STRING\@
00000000                            83      CLR.L D3
00000000                            84  FILL_NEXT_CHAR\@
00000000                            85      MOVE.W (A2)+, D3
00000000                            86      MOVE.W D3, (A1)+
00000000                            87      SUB.L #2, D2
00000000                            88      CMP.L #0, D2
00000000                            89      BNE FILL_NEXT_CHAR\@
00000000                            90  FILL_REMAINING_STRING\@ ; If var1 = var2 and var1 > var2
00000000                            91      CMP.L #0, D1
00000000                            92      BEQ STRING_COPIED\@
00000000                            93      CLR.L D2
00000000                            94      MOVE.W #8224, D2 ;Blank space
00000000                            95  FILL_BLANK_CHAR\@
00000000                            96      MOVE.W D2, (A1)+
00000000                            97      SUB.L #2, D1
00000000                            98      CMP.L #0, D1
00000000                            99      BNE FILL_BLANK_CHAR\@   
00000000                           100  STRING_COPIED\@    
00000000                           101      ENDM
00000000                           102  RETURN_GET_INTEGER  MACRO
00000000                           103  * Macro to add. 
00000000                           104  * Parameters: \1: Param1   ; offset variable
00000000                           105  * Modifies  : A5, A6, A7
00000000                           106  *-----------------------------------------------------------
00000000                           107      CLR.L D0
00000000                           108      MOVE.L A7, A5
00000000                           109      MOVE.L A6, A7
00000000                           110      SUB.L #4, A7
00000000                           111      SUB.L #4, A7
00000000                           112      MOVE.L (A7), D0
00000000                           113      MOVE.L A5, A7
00000000                           114      MOVE.L D0, \1(A7)
00000000                           115      ENDM
00000000                           116  RETURN_GET_BOOLEAN  MACRO
00000000                           117  * Macro to add.
00000000                           118  * Parameters: \1: Param1   ; offset variable
00000000                           119  * Modifies  : D0
00000000                           120  *-----------------------------------------------------------
00000000                           121      CLR.L D0
00000000                           122      MOVE.L A7, A5
00000000                           123      MOVE.L A6, A7
00000000                           124      SUB.L #4, A7
00000000                           125      SUB.L #2, A7A
00000000                           126      MOVE.W (A7), D0
00000000                           127      MOVE.L A5, A7
00000000                           128      MOVE.W D0, \1(A7)
00000000                           129      ENDM
00000000                           130  RETURN_GET_STRING   MACRO
00000000                           131  * Macro to add.                          
00000000                           132  * Parameters: \1: Param1   ;size return string
00000000                           133  *             \2: Param1   ;offset variable
00000000                           134  *             \3: Param1   ;sizevariable
00000000                           135  * Modifies  : D0
00000000                           136  *-----------------------------------------------------------   
00000000                           137      CLR.L D0
00000000                           138      CLR.L D1
00000000                           139      MOVE.L A6, A1
00000000                           140      SUB.L #4, A1
00000000                           141      SUB.L \1, A1
00000000                           142      MOVE.L A7, A2
00000000                           143      ADD.L \2, A2
00000000                           144      MOVE.L \3, D0
00000000                           145      MOVE.L \1, D1
00000000                           146      CMP.L #0, D1
00000000                           147      BEQ FILL_STRING\@
00000000                           148  NEXT_CHAR\@
00000000                           149      MOVE.W (A1)+, D3
00000000                           150      MOVE.W D3, (A2)+
00000000                           151      SUB.L #2, D1 ;RESTAMOS 2 POR 2 BYTES
00000000                           152      CMP.L #0, D1
00000000                           153      BNE NEXT_CHAR\@
00000000                           154  FILL_STRING\@
00000000                           155      CMP.L #0, D0
00000000                           156      BEQ END_STRING\@
00000000                           157      CLR.L D1
00000000                           158      MOVE.W #8224, D1 ;blank spaces
00000000                           159  EMPTY_STRING\@
00000000                           160      MOVE.W D1, (A2)+
00000000                           161      SUB.L #2, D0
00000000                           162      CMP.L #0, D0
00000000                           163      BNE EMPTY_STRING\@
00000000                           164  END_STRING\@    
00000000                           165      ENDM
00000000                           166  STANDARD_INPUT      MACRO
00000000                           167  * Macro to add.                          
00000000                           168  * Parameters: \1 ; offset variable
00000000                           169  * Modifies  : D0, D1
00000000                           170  *-----------------------------------------------------------
00000000                           171      CLR.L D0
00000000                           172      CLR.L D1
00000000                           173      MOVE.L #4, D0
00000000                           174      TRAP #15
00000000                           175      MOVE.L D1, \1(A7)
00000000                           176      ENDM
00000000                           177  ; -----------------------------------------------------------------------------
00000000                           178  OUTPUT_INTEGER      MACRO
00000000                           179  ; Input    - \1  ; Offset's variable with integer value
00000000                           180  ; Modifies - 
00000000                           181  ; -----------------------------------------------------------------------------
00000000                           182     CLR.L D0
00000000                           183     CLR.L D1
00000000                           184     MOVE.L \1(A7), D1
00000000                           185     MOVE.W #20, D0
00000000                           186     trap #15
00000000                           187     ENDM
00000000                           188  ; -----------------------------------------------------------------------------
00000000                           189  OUTPUT_BOOLEAN      MACRO
00000000                           190  ; Input    - \1  ; Offset's variable with boolean value
00000000                           191  ; Modifies - 
00000000                           192  ; -----------------------------------------------------------------------------
00000000                           193     CLR.L D0
00000000                           194     CLR.L D1
00000000                           195     MOVE.W \1(A7), D1
00000000                           196     MOVE.W #20, D0
00000000                           197     trap #15
00000000                           198     ENDM
00000000                           199  ; -----------------------------------------------------------------------------
00000000                           200  PRINT_STRING      MACRO
00000000                           201  * Macro to add.                          
00000000                           202  ; Input    - \1  ; buffer direction
00000000                           203  ;          - \2  ; offset variable
00000000                           204  ;          - \3  ; size string / 2
00000000                           205  ; Modifies - 
00000000                           206  ; -----------------------------------------------------------------------------
00000000                           207      MOVE.L \1,A1
00000000                           208      MOVE.L A7, A2
00000000                           209      ADD.L \2, A2
00000000                           210      MOVE.L \3, D1
00000000                           211      CMP.L #0, D1
00000000                           212      BEQ END_PRINT\@
00000000                           213  NEXT_CHAR_TO_PRINT\@ 
00000000                           214      MOVE.W  (A2)+, D0
00000000                           215      CMP.W #8224, D0
00000000                           216      BEQ END_PRINT\@
00000000                           217      MOVE.B D0 ,(A1)+
00000000                           218      SUB.L #1, D1
00000000                           219      CMP.L #0, D1
00000000                           220      BNE NEXT_CHAR_TO_PRINT\@
00000000                           221  END_PRINT\@
00000000                           222      MOVE.W #1, D0
00000000                           223      MOVE.L \3, D1
00000000                           224      MOVE.L \1,A1
00000000                           225      TRAP #15
00000000                           226  
00000000                           227      ENDM
00000000                           228  ; -----------------------------------------------------------------------------
00000000                           229  PRINT_BUFFER      MACRO
00000000                           230  ; Input    - \1  : size string
00000000                           231  ; -----------------------------------------------------------------------------
00000000                           232      MOVE.W  #0, D0
00000000                           233      MOVE.L \1, A1
00000000                           234      MOVE.L \2, D1
00000000                           235      TRAP      #15
00000000                           236      ENDM
00000000                           237  ; -----------------------------------------------------------------------------
00000000                           238  RETURN_STRING      MACRO
00000000                           239  ; Input    - \1  ; offset return
00000000                           240  ;          - \2  ; offset variable
00000000                           241  ;          - \3  ; size string
00000000                           242  ; Modifies - 
00000000                           243  ; -----------------------------------------------------------------------------
00000000                           244      MOVE.L A7, A2
00000000                           245      ADD.L \1, A2
00000000                           246      MOVE.L A7, A1
00000000                           247      ADD.L \2, A1
00000000                           248      MOVE.L \3, D1
00000000                           249      CMP.L #0, D1
00000000                           250      BEQ FINAL_RETURN_STRING\@
00000000                           251  NEXT_CHAR\@ 
00000000                           252      MOVE.W (A1)+, D2
00000000                           253      MOVE.W D2, (A2)+
00000000                           254      SUB.L #2, D1
00000000                           255      CMP.L #0, D1
00000000                           256      BNE NEXT_CHAR\@ 
00000000                           257  FINAL_RETURN_STRING\@
00000000                           258      ENDM 
00000000                           259  OP_SUMA_VAR_VAR     MACRO
00000000                           260  * Macro to add.                          
00000000                           261  * Parameters: \1: Param1 desti                        
00000000                           262  *             \2: Param2 op1
00000000                           263  *             \3: Param3 op2
00000000                           264  * Modifies  : D0
00000000                           265  *-----------------------------------------------------------
00000000                           266     CLR.L D0
00000000                           267     CLR.L D1
00000000                           268  
00000000                           269     MOVE.L \2(A7), D0
00000000                           270     MOVE.L \3(A7), D1
00000000                           271     
00000000                           272     ADD.L D1,D0
00000000                           273     
00000000                           274     MOVE.L D0, \1(A7)
00000000                           275     
00000000                           276     ENDM
00000000                           277  OP_RESTA_VAR_VAR    MACRO
00000000                           278  * Macro to add.                          
00000000                           279  * Parameters: \1: Param1 desti                        
00000000                           280  *             \2: Param2 op1
00000000                           281  *             \3: Param3 op2
00000000                           282  * Modifies  : D0
00000000                           283  *-----------------------------------------------------------
00000000                           284     CLR.L D0
00000000                           285     CLR.L D1
00000000                           286  
00000000                           287     MOVE.L \2(A7), D0
00000000                           288     MOVE.L \3(A7), D1
00000000                           289     
00000000                           290     SUB.L D1,D0
00000000                           291     
00000000                           292     MOVE.L D0, \1(A7)
00000000                           293     
00000000                           294     ENDM
00000000                           295  OP_MULTI_VAR_VAR    MACRO
00000000                           296  * Macro to add.                          
00000000                           297  * Parameters: \1: Param1 desti                        
00000000                           298  *             \2: Param2 op1
00000000                           299  *             \3: Param3 op2
00000000                           300  * Modifies  : D0
00000000                           301  *-----------------------------------------------------------
00000000                           302     CLR.L D0
00000000                           303     CLR.L D1
00000000                           304  
00000000                           305     MOVE.L \2(A7), D0
00000000                           306     MOVE.L \3(A7), D1
00000000                           307     
00000000                           308     MULS D1,D0
00000000                           309     
00000000                           310     MOVE.L D0, \1(A7)
00000000                           311     
00000000                           312     ENDM
00000000                           313  OP_DIV_VAR_VAR      MACRO
00000000                           314  * Macro to add.                          
00000000                           315  * Parameters: \1: Param1 desti                        
00000000                           316  *             \2: Param2 op1
00000000                           317  *             \3: Param3 op2
00000000                           318  * Modifies  : D0
00000000                           319  *-----------------------------------------------------------
00000000                           320     CLR.L D0
00000000                           321     CLR.L D1
00000000                           322  
00000000                           323     MOVE.L \2(A7), D0
00000000                           324     MOVE.L \3(A7), D1
00000000                           325     
00000000                           326     DIVU D1,D0
00000000                           327     
00000000                           328     MOVE.L D0, \1(A7)
00000000                           329     
00000000                           330     ENDM
00000000                           331  -------------------- end include --------------------
00000000                           332  * -------------------------------------------------------- *
00000000                           333  
00000000                           334  * ----------------------- MAIN PROGRAM -------------------- *
00001000                           335      ORG    $1000
00001000                           336  START:
00001000                           337  
00001000                           338  * CALL MAIN PROCEDURE *
00001000                           339  * Intermediate code => [procedureCallMain, null, null, [OPERATOR. Type operator: procedure, value: 2]]
00001000  4EB9 000010B4            340      JSR PROCEDURE_MAIN
00001006  FFFF FFFF                341      SIMHALT
0000100A                           342  
0000100A                           343  * INITIAL LABEL (PROCEDURE) *
0000100A                           344  * Intermediate code => [procedureName, null, null, [OPERATOR. Type operator: procedure, value: 0]]
0000100A                           345  PROCEDURE_ASE2:
0000100A                           346  
0000100A                           347  * PREAMBLE (PROCEDURE) *
0000100A                           348  * Intermediate code => [procedurePreamble, null, null, [OPERATOR. Type operator: procedure, value: 0]]
0000100A  518F                     349      SUB.L #8, A7
0000100C  598F                     350      SUB.L #4, A7 ; Block pointer
0000100E  2EBC 00000000            351      MOVE.L #0, (A7)
00001014  2C4F                     352      MOVE.L A7, A6
00001016  9DFC 0000000C            353      SUB.L #12, A6 ; Update stack pointer for a new activation block
0000101C                           354  
0000101C                           355  * ASSIGNATION VARIABLE *
0000101C                           356  * Intermediate code => [assign, [OPERATOR. Type operator: int_value, value: 20], null, [OPERATOR. Type operator: variable, value: 2]]
0000101C                           357m     ASSIGNATION_INTEGER #20, -4
0000101C                           358m * MACRO TO ADD.
0000101C                           359m * PARAMETERS: \1: PARAM1   ;VALUE OF INT OR BOOLEAN
0000101C                           360m *             \2: PARAM2   ;OFFSET OF DESTINATION VARIABLE
0000101C                           361m * MODIFIES  : NOTHING
0000101C                           362m *-----------------------------------------------------------
00001024                           363  
00001024                           364  * ARITHMETIC OPERATION *
00001024                           365  * Intermediate code => [sum, [OPERATOR. Type operator: variable, value: 0], [OPERATOR. Type operator: variable, value: 2], [OPERATOR. Type operator: variable, value: 3]]
00001024                           366m     OP_SUMA_VAR_VAR -8, 4, -4
00001024                           367m * MACRO TO ADD.                          
00001024                           368m * PARAMETERS: \1: PARAM1 DESTI                        
00001024                           369m *             \2: PARAM2 OP1
00001024                           370m *             \3: PARAM3 OP2
00001024                           371m * MODIFIES  : D0
00001024                           372m *-----------------------------------------------------------
00001036                           373  
00001036                           374  * ASSIGNATION VARIABLE *
00001036                           375  * Intermediate code => [assign, [OPERATOR. Type operator: variable, value: 3], null, [OPERATOR. Type operator: variable, value: 4]]
00001036                           376m     ASSIGNATION_VARIABLE_INTEGER -8, -12
00001036                           377m * MACRO TO ADD.                          
00001036                           378m * PARAMETERS: \1: PARAM1   ;SOURCE1
00001036                           379m *             \2: PARAM2   ;DESTINATION
00001036                           380m * MODIFIES  : NOTHING
00001036                           381m *-----------------------------------------------------------
0000103C                           382  
0000103C                           383  * STANDARD OUTPUT *
0000103C                           384  * Intermediate code => [standardOutput, null, null, [OPERATOR. Type operator: variable, value: 4]]
0000103C                           385m     OUTPUT_INTEGER -12
0000103C                           386m ; INPUT    - -12  ; OFFSET's variable with integer value
0000103C                           387m ; MODIFIES - 
0000103C                           388m ; -----------------------------------------------------------------------------
0000104A                           389  
0000104A                           390  * PRINT BUFFER *
0000104A                           391m     PRINT_BUFFER #buffer, #0 
0000104A                           392m ; INPUT    - #BUFFER  : SIZE STRING
0000104A                           393m ; -----------------------------------------------------------------------------
00001058                           394  
00001058                           395  * PREAMBLE END (PROCEDURE) *
00001058                           396  * Intermediate code => [procedureEnd, null, null, [OPERATOR. Type operator: procedure, value: 0]]
00001058  DFFC 0000000C            397      ADD.L #12, A7
0000105E  4E75                     398      RTS
00001060                           399  
00001060                           400  * INITIAL LABEL (PROCEDURE) *
00001060                           401  * Intermediate code => [procedureName, null, null, [OPERATOR. Type operator: procedure, value: 1]]
00001060                           402  PROCEDURE_ASE:
00001060                           403  
00001060                           404  * PREAMBLE (PROCEDURE) *
00001060                           405  * Intermediate code => [procedurePreamble, null, null, [OPERATOR. Type operator: procedure, value: 1]]
00001060  518F                     406      SUB.L #8, A7
00001062  598F                     407      SUB.L #4, A7 ; Block pointer
00001064  2EBC 00000000            408      MOVE.L #0, (A7)
0000106A  2C4F                     409      MOVE.L A7, A6
0000106C  9DFC 00000000            410      SUB.L #0, A6 ; Update stack pointer for a new activation block
00001072                           411  
00001072                           412  * CALL PROCEDURE *
00001072                           413  * Intermediate code => [procedureCall, null, null, [OPERATOR. Type operator: procedure, value: 0]]
00001072  2A4F                     414      MOVE.L A7, A5
00001074  2E4E                     415      MOVE.L A6, A7
00001076  2F0D                     416      MOVE.L A5, -(A7)  ;previous block pointer
00001078  598F                     417      SUB.L #4, A7 ; Memory space for PC
0000107A                           418      ************
0000107A                           419      *   PARAM  *
0000107A                           420      ************
0000107A  4280                     421      CLR.L D0 
0000107C  284F                     422      MOVE.L A7, A4 
0000107E  2E4D                     423      MOVE.L A5, A7 
00001080  202F 0008                424      MOVE.L 8(A7), D0
00001084  2E4C                     425      MOVE.L A4, A7 
00001086  2F00                     426      MOVE.L D0, -(A7) 
00001088                           427      ************
00001088                           428      *   PARAM  *
00001088                           429      ************
00001088  4280                     430      CLR.L D0 
0000108A  284F                     431      MOVE.L A7, A4 
0000108C  2E4D                     432      MOVE.L A5, A7 
0000108E  202F 0004                433      MOVE.L 4(A7), D0
00001092  2E4C                     434      MOVE.L A4, A7 
00001094  2F00                     435      MOVE.L D0, -(A7) 
00001096  DFFC 0000000C            436      ADD.L #12, A7  ;Regresamos para poner el pc en el salto
0000109C  4EB8 100A                437      JSR PROCEDURE_ASE2
000010A0  DFFC 00000000            438      ADD.L #0, A7 ;Jump return
000010A6  2A5F                     439      MOVE.L (A7)+, A5 ;Get block pointer
000010A8  2C4F                     440      MOVE.L A7, A6  ;A6 => Stack pointer
000010AA  2E4D                     441      MOVE.L A5, A7 ;Update out block pointer
000010AC                           442  
000010AC                           443  * PREAMBLE END (PROCEDURE) *
000010AC                           444  * Intermediate code => [procedureEnd, null, null, [OPERATOR. Type operator: procedure, value: 1]]
000010AC  DFFC 0000000C            445      ADD.L #12, A7
000010B2  4E75                     446      RTS
000010B4                           447  
000010B4                           448  * INITIAL LABEL (PROCEDURE) *
000010B4                           449  * Intermediate code => [procedureName, null, null, [OPERATOR. Type operator: procedure, value: 2]]
000010B4                           450  PROCEDURE_MAIN:
000010B4                           451  
000010B4                           452  * PREAMBLE (PROCEDURE) *
000010B4                           453  * Intermediate code => [procedurePreamble, null, null, [OPERATOR. Type operator: procedure, value: 2]]
000010B4  9FFC 00000000            454      SUB.L #0, A7
000010BA  598F                     455      SUB.L #4, A7 ; Block pointer
000010BC  2EBC 00000000            456      MOVE.L #0, (A7)
000010C2  2C4F                     457      MOVE.L A7, A6
000010C4  518E                     458      SUB.L #8, A6 ; Update stack pointer for a new activation block
000010C6                           459  
000010C6                           460  * ASSIGNATION VARIABLE *
000010C6                           461  * Intermediate code => [assign, [OPERATOR. Type operator: int_value, value: 5], null, [OPERATOR. Type operator: variable, value: 7]]
000010C6                           462m     ASSIGNATION_INTEGER #5, -4
000010C6                           463m * MACRO TO ADD.
000010C6                           464m * PARAMETERS: \1: PARAM1   ;VALUE OF INT OR BOOLEAN
000010C6                           465m *             \2: PARAM2   ;OFFSET OF DESTINATION VARIABLE
000010C6                           466m * MODIFIES  : NOTHING
000010C6                           467m *-----------------------------------------------------------
000010CE                           468  
000010CE                           469  * ASSIGNATION VARIABLE *
000010CE                           470  * Intermediate code => [assign, [OPERATOR. Type operator: int_value, value: 10], null, [OPERATOR. Type operator: variable, value: 8]]
000010CE                           471m     ASSIGNATION_INTEGER #10, -8
000010CE                           472m * MACRO TO ADD.
000010CE                           473m * PARAMETERS: \1: PARAM1   ;VALUE OF INT OR BOOLEAN
000010CE                           474m *             \2: PARAM2   ;OFFSET OF DESTINATION VARIABLE
000010CE                           475m * MODIFIES  : NOTHING
000010CE                           476m *-----------------------------------------------------------
000010D6                           477  
000010D6                           478  * CALL PROCEDURE *
000010D6                           479  * Intermediate code => [procedureCall, null, null, [OPERATOR. Type operator: procedure, value: 1]]
000010D6  2A4F                     480      MOVE.L A7, A5
000010D8  2E4E                     481      MOVE.L A6, A7
000010DA  2F0D                     482      MOVE.L A5, -(A7)  ;previous block pointer
000010DC  598F                     483      SUB.L #4, A7 ; Memory space for PC
000010DE                           484      ************
000010DE                           485      *   PARAM  *
000010DE                           486      ************
000010DE  4280                     487      CLR.L D0 
000010E0  284F                     488      MOVE.L A7, A4 
000010E2  2E4D                     489      MOVE.L A5, A7 
000010E4  202F FFF8                490      MOVE.L -8(A7), D0
000010E8  2E4C                     491      MOVE.L A4, A7 
000010EA  2F00                     492      MOVE.L D0, -(A7) 
000010EC                           493      ************
000010EC                           494      *   PARAM  *
000010EC                           495      ************
000010EC  4280                     496      CLR.L D0 
000010EE  284F                     497      MOVE.L A7, A4 
000010F0  2E4D                     498      MOVE.L A5, A7 
000010F2  202F FFFC                499      MOVE.L -4(A7), D0
000010F6  2E4C                     500      MOVE.L A4, A7 
000010F8  2F00                     501      MOVE.L D0, -(A7) 
000010FA  DFFC 0000000C            502      ADD.L #12, A7  ;Regresamos para poner el pc en el salto
00001100  4EB8 1060                503      JSR PROCEDURE_ASE
00001104  DFFC 00000000            504      ADD.L #0, A7 ;Jump return
0000110A  2A5F                     505      MOVE.L (A7)+, A5 ;Get block pointer
0000110C  2C4F                     506      MOVE.L A7, A6  ;A6 => Stack pointer
0000110E  2E4D                     507      MOVE.L A5, A7 ;Update out block pointer
00001110                           508  
00001110                           509  * PREAMBLE END (PROCEDURE) *
00001110                           510  * Intermediate code => [procedureEnd, null, null, [OPERATOR. Type operator: procedure, value: 2]]
00001110  588F                     511      ADD.L #4, A7
00001112  4E75                     512      RTS
00001114                           513  
00001114                           514  *Put variables and constants here
00001114                           515  buffer ds.b 1024
00001514                           516  ;variables para mensajes 
00001514= 49 6E 74 72 6F 64 ...    517  informacion dc.b 'Introduzca un texto que no supere los 1024 caracteres:',0  
0000154B= 45 52 52 4F 52 2C ...    518  errorstring dc.b 'ERROR, La longitud del texto supera los 1024 carcateres',0 
00001583                           519  
00001583                           520      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASSIGNATION_BOOLEAN  F6
ASSIGNATION_INTEGER  0
ASSIGNATION_STRING  1EC
ASSIGNATION_VARIABLE_BOOLEAN  4FE
ASSIGNATION_VARIABLE_INTEGER  408
ASSIGNATION_VARIABLE_STRING  5F4
BUFFER              1114
ERRORSTRING         154B
INFORMACION         1514
OP_DIV_VAR_VAR      1BB2
OP_MULTI_VAR_VAR    1A3E
OP_RESTA_VAR_VAR    18C9
OP_SUMA_VAR_VAR     1754
OUTPUT_BOOLEAN      1138
OUTPUT_INTEGER      1046
PRINT_BUFFER        14A2
PRINT_STRING        122A
PROCEDURE_ASE       1060
PROCEDURE_ASE2      100A
PROCEDURE_MAIN      10B4
RETURN_GET_BOOLEAN  AD7
RETURN_GET_INTEGER  99E
RETURN_GET_STRING   C08
RETURN_STRING       156A
STANDARD_INPUT      F45
START               1000
