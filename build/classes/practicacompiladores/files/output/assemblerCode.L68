00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 23/05/2019 17:58:32

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Practice compilers II.
00000000                             3  * Written by : Andrés Ramos Seguí, Alex Mateo Fiol, Jaime Crespí Valero.
00000000                             4  * Date       : 17/06/2019
00000000                             5  * Description: Assembler code for compilers II practice.
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  * ------------------------ INCLUDES ---------------------- *
00000000                             9      INCLUDE "MACROS.X68"
00000000                            10  
00000000                            11  ASSIGNATION_INTEGER     MACRO
00000000                            12  * Macro to add.
00000000                            13  * Parameters: \1: Param1   ;Value of int or boolean
00000000                            14  *             \2: Param2   ;Offset of destination variable
00000000                            15  * Modifies  : Nothing
00000000                            16  *-----------------------------------------------------------
00000000                            17     MOVE.L \1, \2(A7)
00000000                            18     ENDM
00000000                            19  ASSIGNATION_BOOLEAN     MACRO
00000000                            20  * Macro to add.
00000000                            21  * Parameters: \1: Param1   ;Value of int or boolean
00000000                            22  *             \2: Param2   ;Offset of destination variable
00000000                            23  * Modifies  : Nothing
00000000                            24  *-----------------------------------------------------------
00000000                            25     MOVE.W \1, \2(A7)
00000000                            26     ENDM
00000000                            27  ASSIGNATION_STRING  MACRO
00000000                            28  * Macro to add.                          
00000000                            29  * Parameters: \1: Param1   ;offset variable
00000000                            30  *             \2: Param1   ;label variable
00000000                            31  *             \3: Param1   ;size string
00000000                            32  * Modifies  : D0, D1
00000000                            33  *-----------------------------------------------------------
00000000                            34      MOVE.L A7, A1
00000000                            35      ADD.L \1, A1
00000000                            36      MOVE.L \2, A2
00000000                            37      MOVE.L \3, D0
00000000                            38      CMP.L #0, D0
00000000                            39      BEQ STRING_COPIED\@
00000000                            40      CLR.L D1
00000000                            41  FILL_NEXT_CHAR\@
00000000                            42      MOVE.B (A2)+, D1
00000000                            43      MOVE.W D1, (A1)+
00000000                            44      SUB.L #2, D0
00000000                            45      CMP.L #0, D0
00000000                            46      BNE FILL_NEXT_CHAR\@
00000000                            47  STRING_COPIED\@
00000000                            48      ENDM
00000000                            49  ASSIGNATION_VARIABLE_INTEGER    MACRO
00000000                            50  * Macro to add.                          
00000000                            51  * Parameters: \1: Param1   ;source1
00000000                            52  *             \2: Param2   ;destination
00000000                            53  * Modifies  : Nothing
00000000                            54  *-----------------------------------------------------------
00000000                            55     MOVE.L \1(A7), \2(A7)
00000000                            56     
00000000                            57     ENDM
00000000                            58  ASSIGNATION_VARIABLE_BOOLEAN    MACRO
00000000                            59  * Macro to add.                          
00000000                            60  * Parameters: \1: Param1   ;source1
00000000                            61  *             \2: Param2   ;destination
00000000                            62  * Modifies  : Nothing
00000000                            63  *-----------------------------------------------------------
00000000                            64     MOVE.W \1(A7), \2(A7)
00000000                            65     
00000000                            66     ENDM
00000000                            67  ASSIGNATION_VARIABLE_STRING MACRO
00000000                            68  * Macro to add.                          
00000000                            69  * Parameters: \1: Param1   ;offset destination variable
00000000                            70  *             \2: Param1   ;remaining size of destination var
00000000                            71  *             \3: Param1   ;offset source variable
00000000                            72  *             \4: Param1   ;size source variable
00000000                            73  * Modifies  : D0
00000000                            74  *-----------------------------------------------------------    
00000000                            75      MOVE.L A7, A1
00000000                            76      ADD.L \1, A1
00000000                            77      MOVE.L \2, D1
00000000                            78      MOVE.L A7, A2
00000000                            79      ADD.L \3, A2
00000000                            80      MOVE.L \4, D2
00000000                            81      CMP.L #0, D2
00000000                            82      BEQ FILL_REMAINING_STRING\@
00000000                            83      CLR.L D3
00000000                            84  FILL_NEXT_CHAR\@
00000000                            85      MOVE.W (A2)+, D3
00000000                            86      MOVE.W D3, (A1)+
00000000                            87      SUB.L #2, D2
00000000                            88      CMP.L #0, D2
00000000                            89      BNE FILL_NEXT_CHAR\@
00000000                            90  FILL_REMAINING_STRING\@ ; If var1 = var2 and var1 > var2
00000000                            91      CMP.L #0, D1
00000000                            92      BEQ STRING_COPIED\@
00000000                            93      CLR.L D2
00000000                            94      MOVE.W #8224, D2 ;Blank space
00000000                            95  FILL_BLANK_CHAR\@
00000000                            96      MOVE.W D2, (A1)+
00000000                            97      SUB.L #2, D1
00000000                            98      CMP.L #0, D1
00000000                            99      BNE FILL_BLANK_CHAR\@   
00000000                           100  STRING_COPIED\@    
00000000                           101      ENDM
00000000                           102  ; -----------------------------------------------------------------------------
00000000                           103  OUTPUT_INTEGER      MACRO
00000000                           104  ; Input    - \1  ; Offset's variable with integer value
00000000                           105  ; Modifies - 
00000000                           106  ; -----------------------------------------------------------------------------
00000000                           107     CLR.L D0
00000000                           108     CLR.L D1
00000000                           109     MOVE.L \1(A7), D1
00000000                           110     MOVE.W #20, D0
00000000                           111     trap #15
00000000                           112     ENDM
00000000                           113  ; -----------------------------------------------------------------------------
00000000                           114  OUTPUT_BOOLEAN      MACRO
00000000                           115  ; Input    - \1  ; Offset's variable with boolean value
00000000                           116  ; Modifies - 
00000000                           117  ; -----------------------------------------------------------------------------
00000000                           118     CLR.L D0
00000000                           119     CLR.L D1
00000000                           120     MOVE.W \1(A7), D1
00000000                           121     MOVE.W #20, D0
00000000                           122     trap #15
00000000                           123     ENDM
00000000                           124  ; -----------------------------------------------------------------------------
00000000                           125  PRINT      MACRO
00000000                           126  * Macro to add.                          
00000000                           127  ; Input    - \1  : Direccion de memoria del buffer
00000000                           128  ;          - \2  : Desplazamiento var
00000000                           129  ;          - \3  : ocupacion string / 2
00000000                           130  ; Modifies - 
00000000                           131  ; -----------------------------------------------------------------------------
00000000                           132              MOVE.L \1,A1     ;buffer to print
00000000                           133              MOVE.L A7, A2
00000000                           134              ADD.L \2, A2     ;Init string
00000000                           135              MOVE.L \3, D1
00000000                           136              ;mirar si es 0 la ocupacion
00000000                           137              CMP.L #0, D1
00000000                           138              BEQ print_f\@
00000000                           139  print_loop\@ 
00000000                           140              MOVE.W  (A2)+, D0
00000000                           141              CMP.W #8224, D0
00000000                           142              BEQ print_f\@ ; sin son espacios salir
00000000                           143              MOVE.B  D0 ,(A1)+
00000000                           144              SUB.L #1, D1      
00000000                           145              CMP.L   #0, D1
00000000                           146              BNE     print_loop\@      ; Loop again
00000000                           147  print_f\@            
00000000                           148              MOVE.W  #1, D0
00000000                           149              MOVE.L  \3, D1
00000000                           150              MOVE.L  \1,A1    ; Reload original pointing address of bufferptr
00000000                           151              TRAP      #15           ; Display it
00000000                           152  
00000000                           153              ENDM
00000000                           154  ; -----------------------------------------------------------------------------
00000000                           155  PRINT_BUFFER      MACRO
00000000                           156  ; Escribe un string de longitud n de max 255 char por pantalla.
00000000                           157  ; Input    - \1  : size string
00000000                           158  ; -----------------------------------------------------------------------------
00000000                           159      MOVE.W  #0, D0
00000000                           160      MOVE.L \1, A1
00000000                           161      MOVE.L \2, D1
00000000                           162      TRAP      #15
00000000                           163      ENDM
00000000                           164  ; -----------------------------------------------------------------------------
00000000                           165  RETURN_STRING      MACRO
00000000                           166  ; Input    - \1  : Desp return
00000000                           167  ;          - \2  : Desp var
00000000                           168  ;          - \3  : ocupacion string
00000000                           169  ; Modifies - 
00000000                           170  ; -----------------------------------------------------------------------------
00000000                           171              ;situar return
00000000                           172              MOVE.L A7, A2
00000000                           173              ADD.L \1, A2
00000000                           174              ;siatuarvar
00000000                           175              MOVE.L A7, A1
00000000                           176              ADD.L \2, A1
00000000                           177              ;poner ocupacion
00000000                           178              MOVE.L \3, D1
00000000                           179              ;Comprobamos la ocupacion
00000000                           180              CMP.L #0, D1
00000000                           181              BEQ final_return_string_asignar\@
00000000                           182  loop_return_string_asignar\@ 
00000000                           183              MOVE.W (A1)+, D2
00000000                           184              MOVE.W D2, (A2)+
00000000                           185              SUB.L #2, D1
00000000                           186              CMP.L #0, D1
00000000                           187              BNE loop_return_string_asignar\@ 
00000000                           188  final_return_string_asignar\@
00000000                           189              ENDM 
00000000                           190  -------------------- end include --------------------
00000000                           191  * -------------------------------------------------------- *
00000000                           192  
00000000                           193  * ----------------------- MAIN PROGRAM -------------------- *
00001000                           194      ORG    $1000
00001000                           195  START:
00001000                           196  
00001000                           197  * CALL MAIN PROCEDURE *
00001000                           198  * Intermediate code => [procedureCallMain, null, null, [OPERATOR. Type operator: procedure, value: 1]]
00001000  4EB9 000010F6            199      JSR PROCEDURE_MAIN
00001006  FFFF FFFF                200      SIMHALT
0000100A                           201  
0000100A                           202  * INITIAL LABEL (PROCEDURE) *
0000100A                           203  * Intermediate code => [procedureName, null, null, [OPERATOR. Type operator: procedure, value: 0]]
0000100A                           204  PROCEDURE_DOKI:
0000100A                           205  
0000100A                           206  * PREAMBLE (PROCEDURE) *
0000100A                           207  * Intermediate code => [procedurePreamble, null, null, [OPERATOR. Type operator: procedure, value: 0]]
0000100A  9FFC 00000000            208      SUB.L #0, A7
00001010  598F                     209      SUB.L #4, A7 ; Block pointer
00001012  2EBC 00000000            210      MOVE.L #0, (A7)
00001018  2C4F                     211      MOVE.L A7, A6
0000101A  518E                     212      SUB.L #8, A6 ; Update stack pointer for a new activation block
0000101C                           213  
0000101C                           214  * ASSIGNATION VARIABLE *
0000101C                           215  * Intermediate code => [assign, [OPERATOR. Type operator: string_value, value: "2"], null, [OPERATOR. Type operator: variable, value: 0]]
0000101C                           216m     ASSIGNATION_STRING #-2, #string_id_0, #2
0000101C                           217m * MACRO TO ADD.                          
0000101C                           218m * PARAMETERS: \1: PARAM1   ;OFFSET VARIABLE
0000101C                           219m *             \2: PARAM1   ;LABEL VARIABLE
0000101C                           220m *             \3: PARAM1   ;SIZE STRING
0000101C                           221m * MODIFIES  : D0, D1
0000101C                           222m *-----------------------------------------------------------
00001046                           223  
00001046                           224  * ASSIGNATION VARIABLE *
00001046                           225  * Intermediate code => [assign, [OPERATOR. Type operator: variable, value: 0], null, [OPERATOR. Type operator: variable, value: 1]]
00001046                           226m     ASSIGNATION_VARIABLE_STRING #-4, #0, #-2, #2 
00001046                           227m * MACRO TO ADD.                          
00001046                           228m * PARAMETERS: \1: PARAM1   ;OFFSET DESTINATION VARIABLE
00001046                           229m *             \2: PARAM1   ;REMAINING SIZE OF DESTINATION VAR
00001046                           230m *             \3: PARAM1   ;OFFSET SOURCE VARIABLE
00001046                           231m *             \4: PARAM1   ;SIZE SOURCE VARIABLE
00001046                           232m * MODIFIES  : D0
00001046                           233m *-----------------------------------------------------------    
00001090                           234  
00001090                           235  * STANDARD OUTPUT *
00001090                           236  * Intermediate code => [standardOutput, null, null, [OPERATOR. Type operator: variable, value: 1]]
00001090  42B9 000011F2            237      CLR.L buffer  
00001096                           238m     PRINT #buffer, #-4, #1
00001096                           239m * MACRO TO ADD.                          
00001096                           240m ; INPUT    - #BUFFER  : DIRECCION DE MEMORIA DEL BUFFER
00001096                           241m ;          - #-4  : DESPLAZAMIENTO VAR
00001096                           242m ;          - #1  : OCUPACION STRING / 2
00001096                           243m ; MODIFIES - 
00001096                           244m ; -----------------------------------------------------------------------------
000010A6                           245m             ;MIRAR SI ES 0 LA OCUPACION
000010D4                           246  
000010D4                           247  * PRINT BUFFER *
000010D4                           248m     PRINT_BUFFER #buffer, #0 
000010D4                           249m ; ESCRIBE UN STRING DE LONGITUD N DE MAX 255 CHAR POR PANTALLA.
000010D4                           250m ; INPUT    - #BUFFER  : SIZE STRING
000010D4                           251m ; -----------------------------------------------------------------------------
000010E2                           252  
000010E2                           253  * ASSIGNATION VARIABLE *
000010E2                           254  * Intermediate code => [assign, [OPERATOR. Type operator: int_value, value: 6], null, [OPERATOR. Type operator: variable, value: 2]]
000010E2                           255m     ASSIGNATION_INTEGER #6, -8
000010E2                           256m * MACRO TO ADD.
000010E2                           257m * PARAMETERS: \1: PARAM1   ;VALUE OF INT OR BOOLEAN
000010E2                           258m *             \2: PARAM2   ;OFFSET OF DESTINATION VARIABLE
000010E2                           259m * MODIFIES  : NOTHING
000010E2                           260m *-----------------------------------------------------------
000010EA                           261  
000010EA                           262  * RETURN (PROCEDURE) *
000010EA                           263  * Intermediate code => [procedureReturn, [OPERATOR. Type operator: procedure, value: 0], null, [OPERATOR. Type operator: variable, value: 2]]
000010EA  202F FFF8                264      MOVE.L -8(A7), D0
000010EE  2F40 0008                265      MOVE.L D0, 8(A7)
000010F2                           266  
000010F2                           267  * PREAMBLE END (PROCEDURE) *
000010F2                           268  * Intermediate code => [procedureEnd, null, null, [OPERATOR. Type operator: procedure, value: 0]]
000010F2  588F                     269      ADD.L #4, A7
000010F4  4E75                     270      RTS
000010F6                           271  
000010F6                           272  * INITIAL LABEL (PROCEDURE) *
000010F6                           273  * Intermediate code => [procedureName, null, null, [OPERATOR. Type operator: procedure, value: 1]]
000010F6                           274  PROCEDURE_MAIN:
000010F6                           275  
000010F6                           276  * PREAMBLE (PROCEDURE) *
000010F6                           277  * Intermediate code => [procedurePreamble, null, null, [OPERATOR. Type operator: procedure, value: 1]]
000010F6  9FFC 00000000            278      SUB.L #0, A7
000010FC  598F                     279      SUB.L #4, A7 ; Block pointer
000010FE  2EBC 00000000            280      MOVE.L #0, (A7)
00001104  2C4F                     281      MOVE.L A7, A6
00001106  9DFC 000000A4            282      SUB.L #164, A6 ; Update stack pointer for a new activation block
0000110C                           283  
0000110C                           284  * ASSIGNATION VARIABLE *
0000110C                           285  * Intermediate code => [assign, [OPERATOR. Type operator: string_value, value: "holaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], null, [OPERATOR. Type operator: variable, value: 3]]
0000110C                           286m     ASSIGNATION_STRING #-82, #string_id_1, #82
0000110C                           287m * MACRO TO ADD.                          
0000110C                           288m * PARAMETERS: \1: PARAM1   ;OFFSET VARIABLE
0000110C                           289m *             \2: PARAM1   ;LABEL VARIABLE
0000110C                           290m *             \3: PARAM1   ;SIZE STRING
0000110C                           291m * MODIFIES  : D0, D1
0000110C                           292m *-----------------------------------------------------------
00001136                           293  
00001136                           294  * ASSIGNATION VARIABLE *
00001136                           295  * Intermediate code => [assign, [OPERATOR. Type operator: variable, value: 3], null, [OPERATOR. Type operator: variable, value: 4]]
00001136                           296m     ASSIGNATION_VARIABLE_STRING #-164, #0, #-82, #82 
00001136                           297m * MACRO TO ADD.                          
00001136                           298m * PARAMETERS: \1: PARAM1   ;OFFSET DESTINATION VARIABLE
00001136                           299m *             \2: PARAM1   ;REMAINING SIZE OF DESTINATION VAR
00001136                           300m *             \3: PARAM1   ;OFFSET SOURCE VARIABLE
00001136                           301m *             \4: PARAM1   ;SIZE SOURCE VARIABLE
00001136                           302m * MODIFIES  : D0
00001136                           303m *-----------------------------------------------------------    
00001180                           304  
00001180                           305  * CALL PROCEDURE *
00001180                           306  * Intermediate code => [procedureCall, null, null, [OPERATOR. Type operator: procedure, value: 0]]
00001180  2A4F                     307      MOVE.L A7, A5
00001182  2E4E                     308      MOVE.L A6, A7
00001184  2F0D                     309      MOVE.L A5, -(A7)  ;previous block pointer
00001186  598F                     310      SUB.L #4, A7 ; Memory space for return
00001188  598F                     311      SUB.L #4, A7 ; Memory space for PC
0000118A  588F                     312      ADD.L #4, A7  ;Regresamos para poner el pc en el salto
0000118C  4EB8 100A                313      JSR PROCEDURE_DOKI
00001190  588F                     314      ADD.L #4, A7 ;Jump return
00001192  2A5F                     315      MOVE.L (A7)+, A5 ;Get block pointer
00001194  2C4F                     316      MOVE.L A7, A6  ;A6 => Stack pointer
00001196  2E4D                     317      MOVE.L A5, A7 ;Update out block pointer
00001198                           318  
00001198                           319  * STANDARD OUTPUT *
00001198                           320  * Intermediate code => [standardOutput, null, null, [OPERATOR. Type operator: variable, value: 4]]
00001198  42B9 000011F2            321      CLR.L buffer  
0000119E                           322m     PRINT #buffer, #-164, #41
0000119E                           323m * MACRO TO ADD.                          
0000119E                           324m ; INPUT    - #BUFFER  : DIRECCION DE MEMORIA DEL BUFFER
0000119E                           325m ;          - #-164  : DESPLAZAMIENTO VAR
0000119E                           326m ;          - #41  : OCUPACION STRING / 2
0000119E                           327m ; MODIFIES - 
0000119E                           328m ; -----------------------------------------------------------------------------
000011AE                           329m             ;MIRAR SI ES 0 LA OCUPACION
000011DC                           330  
000011DC                           331  * PRINT BUFFER *
000011DC                           332m     PRINT_BUFFER #buffer, #0 
000011DC                           333m ; ESCRIBE UN STRING DE LONGITUD N DE MAX 255 CHAR POR PANTALLA.
000011DC                           334m ; INPUT    - #BUFFER  : SIZE STRING
000011DC                           335m ; -----------------------------------------------------------------------------
000011EA                           336  
000011EA                           337  * PREAMBLE END (PROCEDURE) *
000011EA                           338  * Intermediate code => [procedureEnd, null, null, [OPERATOR. Type operator: procedure, value: 1]]
000011EA  588F                     339      ADD.L #4, A7
000011EC  4E75                     340      RTS
000011EE  FFFF FFFF                341      SIMHALT
000011F2                           342  
000011F2                           343  *Put variables and constants here
000011F2                           344  buffer ds.b 1024
000015F2= 32 00                    345  string_id_0 dc.b '2', 0
000015F4= 68 6F 6C 61 61 61 ...    346  string_id_1 dc.b 'holaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 0
0000161E                           347  ;variables para mensajes 
0000161E= 49 6E 74 72 6F 64 ...    348  informacion dc.b 'Introduzca un texto que no supere los 1024 caracteres:',0  
00001655= 45 52 52 4F 52 2C ...    349  errorstring dc.b 'ERROR, La longitud del texto supera los 1024 carcateres',0 
0000168D                           350  
0000168D                           351      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASSIGNATION_BOOLEAN  F6
ASSIGNATION_INTEGER  0
ASSIGNATION_STRING  1EC
ASSIGNATION_VARIABLE_BOOLEAN  4FE
ASSIGNATION_VARIABLE_INTEGER  408
ASSIGNATION_VARIABLE_STRING  5F4
BUFFER              11F2
ERRORSTRING         1655
FILL_BLANK_CHAR_2   1084
FILL_BLANK_CHAR_7   1174
FILL_NEXT_CHAR_1    1038
FILL_NEXT_CHAR_2    1066
FILL_NEXT_CHAR_6    1128
FILL_NEXT_CHAR_7    1156
FILL_REMAINING_STRING_2  1074
FILL_REMAINING_STRING_7  1164
INFORMACION         161E
OUTPUT_BOOLEAN      A90
OUTPUT_INTEGER      99E
PRINT               B82
PRINT_BUFFER        F70
PRINT_F_3           10C6
PRINT_F_8           11CE
PRINT_LOOP_3        10B0
PRINT_LOOP_8        11B8
PROCEDURE_DOKI      100A
PROCEDURE_MAIN      10F6
RETURN_STRING       1079
START               1000
STRING_COPIED_1     1046
STRING_COPIED_2     1090
STRING_COPIED_6     1136
STRING_COPIED_7     1180
STRING_ID_0         15F2
STRING_ID_1         15F4
