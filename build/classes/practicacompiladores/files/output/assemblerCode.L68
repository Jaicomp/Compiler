00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 23/05/2019 22:47:18

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Practice compilers II.
00000000                             3  * Written by : Andrés Ramos Seguí, Alex Mateo Fiol, Jaime Crespí Valero.
00000000                             4  * Date       : 17/06/2019
00000000                             5  * Description: Assembler code for compilers II practice.
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  * ------------------------ INCLUDES ---------------------- *
00000000                             9      INCLUDE "MACROS.X68"
00000000                            10  
00000000                            11  ASSIGNATION_INTEGER     MACRO
00000000                            12  * Macro to add.
00000000                            13  * Parameters: \1: Param1   ;Value of int or boolean
00000000                            14  *             \2: Param2   ;Offset of destination variable
00000000                            15  * Modifies  : Nothing
00000000                            16  *-----------------------------------------------------------
00000000                            17     MOVE.L \1, \2(A7)
00000000                            18     ENDM
00000000                            19  ASSIGNATION_BOOLEAN     MACRO
00000000                            20  * Macro to add.
00000000                            21  * Parameters: \1: Param1   ;Value of int or boolean
00000000                            22  *             \2: Param2   ;Offset of destination variable
00000000                            23  * Modifies  : Nothing
00000000                            24  *-----------------------------------------------------------
00000000                            25     MOVE.W \1, \2(A7)
00000000                            26     ENDM
00000000                            27  ASSIGNATION_STRING  MACRO
00000000                            28  * Macro to add.                          
00000000                            29  * Parameters: \1: Param1   ;offset variable
00000000                            30  *             \2: Param1   ;label variable
00000000                            31  *             \3: Param1   ;size string
00000000                            32  * Modifies  : D0, D1
00000000                            33  *-----------------------------------------------------------
00000000                            34      MOVE.L A7, A1
00000000                            35      ADD.L \1, A1
00000000                            36      MOVE.L \2, A2
00000000                            37      MOVE.L \3, D0
00000000                            38      CMP.L #0, D0
00000000                            39      BEQ STRING_COPIED\@
00000000                            40      CLR.L D1
00000000                            41  FILL_NEXT_CHAR\@
00000000                            42      MOVE.B (A2)+, D1
00000000                            43      MOVE.W D1, (A1)+
00000000                            44      SUB.L #2, D0
00000000                            45      CMP.L #0, D0
00000000                            46      BNE FILL_NEXT_CHAR\@
00000000                            47  STRING_COPIED\@
00000000                            48      ENDM
00000000                            49  ASSIGNATION_VARIABLE_INTEGER    MACRO
00000000                            50  * Macro to add.                          
00000000                            51  * Parameters: \1: Param1   ;source1
00000000                            52  *             \2: Param2   ;destination
00000000                            53  * Modifies  : Nothing
00000000                            54  *-----------------------------------------------------------
00000000                            55     MOVE.L \1(A7), \2(A7)
00000000                            56     
00000000                            57     ENDM
00000000                            58  ASSIGNATION_VARIABLE_BOOLEAN    MACRO
00000000                            59  * Macro to add.                          
00000000                            60  * Parameters: \1: Param1   ;source1
00000000                            61  *             \2: Param2   ;destination
00000000                            62  * Modifies  : Nothing
00000000                            63  *-----------------------------------------------------------
00000000                            64     MOVE.W \1(A7), \2(A7)
00000000                            65     
00000000                            66     ENDM
00000000                            67  ASSIGNATION_VARIABLE_STRING MACRO
00000000                            68  * Macro to add.                          
00000000                            69  * Parameters: \1: Param1   ;offset destination variable
00000000                            70  *             \2: Param1   ;remaining size of destination var
00000000                            71  *             \3: Param1   ;offset source variable
00000000                            72  *             \4: Param1   ;size source variable
00000000                            73  * Modifies  : D0
00000000                            74  *-----------------------------------------------------------    
00000000                            75      MOVE.L A7, A1
00000000                            76      ADD.L \1, A1
00000000                            77      MOVE.L \2, D1
00000000                            78      MOVE.L A7, A2
00000000                            79      ADD.L \3, A2
00000000                            80      MOVE.L \4, D2
00000000                            81      CMP.L #0, D2
00000000                            82      BEQ FILL_REMAINING_STRING\@
00000000                            83      CLR.L D3
00000000                            84  FILL_NEXT_CHAR\@
00000000                            85      MOVE.W (A2)+, D3
00000000                            86      MOVE.W D3, (A1)+
00000000                            87      SUB.L #2, D2
00000000                            88      CMP.L #0, D2
00000000                            89      BNE FILL_NEXT_CHAR\@
00000000                            90  FILL_REMAINING_STRING\@ ; If var1 = var2 and var1 > var2
00000000                            91      CMP.L #0, D1
00000000                            92      BEQ STRING_COPIED\@
00000000                            93      CLR.L D2
00000000                            94      MOVE.W #8224, D2 ;Blank space
00000000                            95  FILL_BLANK_CHAR\@
00000000                            96      MOVE.W D2, (A1)+
00000000                            97      SUB.L #2, D1
00000000                            98      CMP.L #0, D1
00000000                            99      BNE FILL_BLANK_CHAR\@   
00000000                           100  STRING_COPIED\@    
00000000                           101      ENDM
00000000                           102  RECUPERAR_VALOR_INT     MACRO
00000000                           103  * Macro to add.                          
00000000                           104  * Parameters: \1: Param1   ;DESP DESTI
00000000                           105  * Modifies  : A5, A6, A7
00000000                           106  *-----------------------------------------------------------
00000000                           107      CLR.L D0
00000000                           108      MOVE.L A7, A5       ;GUARDAMOS BP\n";
00000000                           109      MOVE.L A6, A7       ;SUBIMOS A LA CIMA";
00000000                           110      SUB.L #4, A7        ;SALTAMOS BP ACTUAL GUARDADO
00000000                           111      SUB.L #4, A7        ;NOS SITUAMOS EN LA RESPUESTA
00000000                           112      MOVE.L (A7), D0     ;RECOGEMOS VALOR ENTERO\n";
00000000                           113      MOVE.L A5, A7       ;VOLVEMOS A BP\n";
00000000                           114      MOVE.L D0, \1(A7)   ;PONEMOS VALOR
00000000                           115          
00000000                           116      ENDM
00000000                           117  RECUPERAR_VALOR_BOOLEAN     MACRO
00000000                           118  * Macro to add.                          
00000000                           119  * Parameters: \1: Param1   ;DESP
00000000                           120  * Modifies  : D0
00000000                           121  *-----------------------------------------------------------
00000000                           122      CLR.L D0
00000000                           123      MOVE.L A7, A5       ;GUARDAMOS BP\n";
00000000                           124      MOVE.L A6, A7       ;SUBIMOS A LA CIMA";
00000000                           125      SUB.L #4, A7        ;SALTAMOS BP ACTUAL GUARDADO
00000000                           126      SUB.L #2, A7        ;NOS SITUAMOS EN LA RESPUESTA
00000000                           127      MOVE.W (A7), D0     ;RECOGEMOS VALOR BOOLEANO\n";
00000000                           128      MOVE.L A5, A7       ;VOLVEMOS A BP\n";
00000000                           129      MOVE.W D0, \1(A7)   ;PONEMOS VALOR
00000000                           130          
00000000                           131      ENDM
00000000                           132  RECUPERAR_VALOR_STRING  MACRO
00000000                           133  * Macro to add.                          
00000000                           134  * Parameters: \1: Param1   ;ocup ret
00000000                           135  *             \2: Param1   ;desp desti
00000000                           136  *             \3: Param1   ;ocup desti
00000000                           137  * Modifies  : D0
00000000                           138  *-----------------------------------------------------------   
00000000                           139      CLR.L D0
00000000                           140      CLR.L D1
00000000                           141      ;Situamos encima de return
00000000                           142      MOVE.L A6, A1
00000000                           143      SUB.L #4, A1 ;Saltamos BP
00000000                           144      SUB.L \1, A1
00000000                           145      ;Nos situamos en var desti
00000000                           146      MOVE.L A7, A2
00000000                           147      ADD.L \2, A2
00000000                           148      ;Cogemos tamaño desti
00000000                           149      MOVE.L \3, D0
00000000                           150      ;Cogemos tamaño return
00000000                           151      MOVE.L \1, D1
00000000                           152      ;Comprobar si es 0
00000000                           153      CMP.L #0, D1
00000000                           154      BEQ RETURN_RELLENAR\@
00000000                           155  RETURN_STRING_SEGUIR\@
00000000                           156      MOVE.W (A1)+, D3
00000000                           157      MOVE.W D3, (A2)+
00000000                           158      SUB.L #2, D1 ;RESTAMOS 2 POR 2 BYTES
00000000                           159      CMP.L #0, D1
00000000                           160      BNE RETURN_STRING_SEGUIR\@
00000000                           161  RETURN_RELLENAR\@
00000000                           162      CMP.L #0, D0
00000000                           163      BEQ RETURN_DEVOLVER_STRING\@
00000000                           164      ;RELLENAR STRING CON ESPACIOS
00000000                           165      CLR.L D1
00000000                           166      MOVE.W #8224, D1 ;Rellenamos con espacios
00000000                           167  RETURN_VAR_STRING_VACIO\@
00000000                           168      MOVE.W D1, (A2)+
00000000                           169      SUB.L #2, D0
00000000                           170      CMP.L #0, D0
00000000                           171      BNE RETURN_VAR_STRING_VACIO\@   
00000000                           172  RETURN_DEVOLVER_STRING\@    
00000000                           173      ENDM
00000000                           174  ; -----------------------------------------------------------------------------
00000000                           175  OUTPUT_INTEGER      MACRO
00000000                           176  ; Input    - \1  ; Offset's variable with integer value
00000000                           177  ; Modifies - 
00000000                           178  ; -----------------------------------------------------------------------------
00000000                           179     CLR.L D0
00000000                           180     CLR.L D1
00000000                           181     MOVE.L \1(A7), D1
00000000                           182     MOVE.W #20, D0
00000000                           183     trap #15
00000000                           184     ENDM
00000000                           185  ; -----------------------------------------------------------------------------
00000000                           186  OUTPUT_BOOLEAN      MACRO
00000000                           187  ; Input    - \1  ; Offset's variable with boolean value
00000000                           188  ; Modifies - 
00000000                           189  ; -----------------------------------------------------------------------------
00000000                           190     CLR.L D0
00000000                           191     CLR.L D1
00000000                           192     MOVE.W \1(A7), D1
00000000                           193     MOVE.W #20, D0
00000000                           194     trap #15
00000000                           195     ENDM
00000000                           196  ; -----------------------------------------------------------------------------
00000000                           197  PRINT_STRING      MACRO
00000000                           198  * Macro to add.                          
00000000                           199  ; Input    - \1  : buffer direction
00000000                           200  ;          - \2  : offset variable
00000000                           201  ;          - \3  : size string / 2
00000000                           202  ; Modifies - 
00000000                           203  ; -----------------------------------------------------------------------------
00000000                           204      MOVE.L \1,A1
00000000                           205      MOVE.L A7, A2
00000000                           206      ADD.L \2, A2
00000000                           207      MOVE.L \3, D1
00000000                           208      CMP.L #0, D1
00000000                           209      BEQ END_PRINT\@
00000000                           210  NEXT_CHAR_TO_PRINT\@ 
00000000                           211      MOVE.W  (A2)+, D0
00000000                           212      CMP.W #8224, D0
00000000                           213      BEQ END_PRINT\@
00000000                           214      MOVE.B D0 ,(A1)+
00000000                           215      SUB.L #1, D1
00000000                           216      CMP.L #0, D1
00000000                           217      BNE NEXT_CHAR_TO_PRINT\@
00000000                           218  END_PRINT\@
00000000                           219      MOVE.W #1, D0
00000000                           220      MOVE.L \3, D1
00000000                           221      MOVE.L \1,A1
00000000                           222      TRAP #15
00000000                           223  
00000000                           224              ENDM
00000000                           225  ; -----------------------------------------------------------------------------
00000000                           226  PRINT_BUFFER      MACRO
00000000                           227  ; Escribe un string de longitud n de max 255 char por pantalla.
00000000                           228  ; Input    - \1  : size string
00000000                           229  ; -----------------------------------------------------------------------------
00000000                           230      MOVE.W  #0, D0
00000000                           231      MOVE.L \1, A1
00000000                           232      MOVE.L \2, D1
00000000                           233      TRAP      #15
00000000                           234      ENDM
00000000                           235  ; -----------------------------------------------------------------------------
00000000                           236  RETURN_STRING      MACRO
00000000                           237  ; Input    - \1  : Desp return
00000000                           238  ;          - \2  : Desp var
00000000                           239  ;          - \3  : ocupacion string
00000000                           240  ; Modifies - 
00000000                           241  ; -----------------------------------------------------------------------------
00000000                           242              ;situar return
00000000                           243              MOVE.L A7, A2
00000000                           244              ADD.L \1, A2
00000000                           245              ;siatuarvar
00000000                           246              MOVE.L A7, A1
00000000                           247              ADD.L \2, A1
00000000                           248              ;poner ocupacion
00000000                           249              MOVE.L \3, D1
00000000                           250              ;Comprobamos la ocupacion
00000000                           251              CMP.L #0, D1
00000000                           252              BEQ final_return_string_asignar\@
00000000                           253  loop_return_string_asignar\@ 
00000000                           254              MOVE.W (A1)+, D2
00000000                           255              MOVE.W D2, (A2)+
00000000                           256              SUB.L #2, D1
00000000                           257              CMP.L #0, D1
00000000                           258              BNE loop_return_string_asignar\@ 
00000000                           259  final_return_string_asignar\@
00000000                           260              ENDM 
00000000                           261  -------------------- end include --------------------
00000000                           262  * -------------------------------------------------------- *
00000000                           263  
00000000                           264  * ----------------------- MAIN PROGRAM -------------------- *
00001000                           265      ORG    $1000
00001000                           266  START:
00001000                           267  
00001000                           268  * CALL MAIN PROCEDURE *
00001000                           269  * Intermediate code => [procedureCallMain, null, null, [OPERATOR. Type operator: procedure, value: 1]]
00001000  4EB9 00001030            270      JSR PROCEDURE_MAIN
00001006  FFFF FFFF                271      SIMHALT
0000100A                           272  
0000100A                           273  * INITIAL LABEL (PROCEDURE) *
0000100A                           274  * Intermediate code => [procedureName, null, null, [OPERATOR. Type operator: procedure, value: 0]]
0000100A                           275  PROCEDURE_DOKI:
0000100A                           276  
0000100A                           277  * PREAMBLE (PROCEDURE) *
0000100A                           278  * Intermediate code => [procedurePreamble, null, null, [OPERATOR. Type operator: procedure, value: 0]]
0000100A  9FFC 00000000            279      SUB.L #0, A7
00001010  598F                     280      SUB.L #4, A7 ; Block pointer
00001012  2EBC 00000000            281      MOVE.L #0, (A7)
00001018  2C4F                     282      MOVE.L A7, A6
0000101A  598E                     283      SUB.L #4, A6 ; Update stack pointer for a new activation block
0000101C                           284  
0000101C                           285  * ASSIGNATION VARIABLE *
0000101C                           286  * Intermediate code => [assign, [OPERATOR. Type operator: int_value, value: 6], null, [OPERATOR. Type operator: variable, value: 0]]
0000101C                           287m     ASSIGNATION_INTEGER #6, -4
0000101C                           288m * MACRO TO ADD.
0000101C                           289m * PARAMETERS: \1: PARAM1   ;VALUE OF INT OR BOOLEAN
0000101C                           290m *             \2: PARAM2   ;OFFSET OF DESTINATION VARIABLE
0000101C                           291m * MODIFIES  : NOTHING
0000101C                           292m *-----------------------------------------------------------
00001024                           293  
00001024                           294  * RETURN (PROCEDURE) *
00001024                           295  * Intermediate code => [procedureReturn, [OPERATOR. Type operator: procedure, value: 0], null, [OPERATOR. Type operator: variable, value: 0]]
00001024  202F FFFC                296      MOVE.L -4(A7), D0
00001028  2F40 0008                297      MOVE.L D0, 8(A7)
0000102C                           298  
0000102C                           299  * PREAMBLE END (PROCEDURE) *
0000102C                           300  * Intermediate code => [procedureEnd, null, null, [OPERATOR. Type operator: procedure, value: 0]]
0000102C  588F                     301      ADD.L #4, A7
0000102E  4E75                     302      RTS
00001030                           303  
00001030                           304  * INITIAL LABEL (PROCEDURE) *
00001030                           305  * Intermediate code => [procedureName, null, null, [OPERATOR. Type operator: procedure, value: 1]]
00001030                           306  PROCEDURE_MAIN:
00001030                           307  
00001030                           308  * PREAMBLE (PROCEDURE) *
00001030                           309  * Intermediate code => [procedurePreamble, null, null, [OPERATOR. Type operator: procedure, value: 1]]
00001030  9FFC 00000000            310      SUB.L #0, A7
00001036  598F                     311      SUB.L #4, A7 ; Block pointer
00001038  2EBC 00000000            312      MOVE.L #0, (A7)
0000103E  2C4F                     313      MOVE.L A7, A6
00001040  5D8E                     314      SUB.L #6, A6 ; Update stack pointer for a new activation block
00001042                           315  
00001042                           316  * ASSIGNATION VARIABLE *
00001042                           317  * Intermediate code => [assign, [OPERATOR. Type operator: string_value, value: "ASD"], null, [OPERATOR. Type operator: variable, value: 1]]
00001042                           318m     ASSIGNATION_STRING #-6, #string_id_0, #6
00001042                           319m * MACRO TO ADD.                          
00001042                           320m * PARAMETERS: \1: PARAM1   ;OFFSET VARIABLE
00001042                           321m *             \2: PARAM1   ;LABEL VARIABLE
00001042                           322m *             \3: PARAM1   ;SIZE STRING
00001042                           323m * MODIFIES  : D0, D1
00001042                           324m *-----------------------------------------------------------
0000106C                           325  
0000106C                           326  * STANDARD OUTPUT *
0000106C                           327  * Intermediate code => [standardOutput, null, null, [OPERATOR. Type operator: variable, value: 1]]
0000106C  42B9 000010C2            328      CLR.L buffer  
00001072                           329m     PRINT_STRING #buffer, #-6, #3
00001072                           330m * MACRO TO ADD.                          
00001072                           331m ; INPUT    - #BUFFER  : BUFFER DIRECTION
00001072                           332m ;          - #-6  : OFFSET VARIABLE
00001072                           333m ;          - #3  : SIZE STRING / 2
00001072                           334m ; MODIFIES - 
00001072                           335m ; -----------------------------------------------------------------------------
000010B0                           336  
000010B0                           337  * PRINT BUFFER *
000010B0                           338m     PRINT_BUFFER #buffer, #0 
000010B0                           339m ; ESCRIBE UN STRING DE LONGITUD N DE MAX 255 CHAR POR PANTALLA.
000010B0                           340m ; INPUT    - #BUFFER  : SIZE STRING
000010B0                           341m ; -----------------------------------------------------------------------------
000010BE                           342  
000010BE                           343  * PREAMBLE END (PROCEDURE) *
000010BE                           344  * Intermediate code => [procedureEnd, null, null, [OPERATOR. Type operator: procedure, value: 1]]
000010BE  588F                     345      ADD.L #4, A7
000010C0  4E75                     346      RTS
000010C2                           347  
000010C2                           348  *Put variables and constants here
000010C2                           349  buffer ds.b 1024
000014C2= 41 53 44 00              350  string_id_0 dc.b 'ASD', 0
000014C6                           351  ;variables para mensajes 
000014C6= 49 6E 74 72 6F 64 ...    352  informacion dc.b 'Introduzca un texto que no supere los 1024 caracteres:',0  
000014FD= 45 52 52 4F 52 2C ...    353  errorstring dc.b 'ERROR, La longitud del texto supera los 1024 carcateres',0 
00001535                           354  
00001535                           355      END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ASSIGNATION_BOOLEAN  F6
ASSIGNATION_INTEGER  0
ASSIGNATION_STRING  1EC
ASSIGNATION_VARIABLE_BOOLEAN  4FE
ASSIGNATION_VARIABLE_INTEGER  408
ASSIGNATION_VARIABLE_STRING  5F4
BUFFER              10C2
END_PRINT_3         10A2
ERRORSTRING         14FD
FILL_NEXT_CHAR_2    105E
INFORMACION         14C6
NEXT_CHAR_TO_PRINT_3  108C
OUTPUT_BOOLEAN      12F7
OUTPUT_INTEGER      1205
PRINT_BUFFER        1669
PRINT_STRING        13E9
PROCEDURE_DOKI      100A
PROCEDURE_MAIN      1030
RECUPERAR_VALOR_BOOLEAN  BB4
RECUPERAR_VALOR_INT  99E
RECUPERAR_VALOR_STRING  DBE
RETURN_STRING       1772
START               1000
STRING_COPIED_2     106C
STRING_ID_0         14C2
